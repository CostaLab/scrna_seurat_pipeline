---
title: "Between Samples hallmark analysis"
date: "{{TODAY}}"
output:
  html_document:
    toc: yes
    toc_depth: 3
  pdf_document:
    toc: yes
    toc_depth: '3'
params:
    scrna: 'scrna object'
    cluster: "clusters to analyse"
    cluster_info: "cluster info"
    project: "name/tag of the project"
    savedir: "directory where rds files were saved"
    funcs: "analysis steps to be performed"
    report_data_folder: "folder with the output tables"
    report_tables_folder: "folder with the table elements"
    report_plots_folder: "folder with the plot elements"
    report_plots_folder_png: "folder with the png plot elements"
    report_plots_folder_pdf: "folder with the pdf plot elements"
    author: "author of document"
author: '`r params$author`'
---



```{r Marker_genes, echo=FALSE, warning=FALSE, message=FALSE, results='hide' }
#use former data coz the DE analysis takes too much time.
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(WriteXLS))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(digest))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(EnhancedVolcano))
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(glue))
`%ni%` <- Negate(`%in%`)


is_contigous_true_df <- function(is_sigs){
  ret_df <- data.frame(keep=FALSE, avgIdx=-1)
  if(any(is_sigs) & table(is_sigs)['TRUE'] == 1){
        ret_df$keep=TRUE
        ret_df$avgIdx = which(is_sigs == TRUE)
        return(ret_df)
  }
  return(ret_df)
}


#savedir <- "save/save-{{CC}}"
savedir <- "../save"


cluster_use <- params$cluster
hallmark_sample_name <-paste0("pathway_name_", cluster_use)

`%ni%` <- Negate(`%in%`)


if(hallmark_sample_name %ni% names(scrna@tools)){
  stop(glue("ERORR:hallmark samples comparing hasn't been calculated for cluster:{cluster_use}\n Please run [scrna_pathway_name]!!!"))
}




all_hallmarkup_list <-  scrna@tools[[hallmark_sample_name]]$hallmarkup
all_hallmarkdown_list <-  scrna@tools[[hallmark_sample_name]]$hallmarkdown
```

{% for tX, tY in lst_1v1 %}


## {{tX}} vs {{tY}}  hallmark up

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide', fig.width=13, fig.height=20}
a_vs <- "{{tX}}.vs.{{tY}}"
hallmark_ups <- all_hallmarkup_list[[a_vs]]
hallmark_ups <- hallmark_ups[sapply(hallmark_ups, function(x) dim(x)[1]) > 0]

df_list <- hallmark_ups
df_list <- lapply(names(hallmark_ups), function(x) hallmark_ups[[x]]@result)
names(df_list) <- names(hallmark_ups)

if(length(df_list) >= 2){


df_list <- lapply(names(hallmark_ups), function(x) hallmark_ups[[x]]@result)
for(i in 1:length(df_list)){
    assertthat::assert_that( all(rownames(df_list[[i]]) == df_list[[i]]$ID))
}


names(df_list) <- names(hallmark_ups)
union_TermID <- Reduce(union, lapply(df_list, function(x) x$ID))

union_df <- do.call(rbind, df_list)
union_df$GeneRatio <- 0
union_df$BgRatio <- 0
union_df$pvalue <- 1
union_df$p.adjust <- 1
union_df$qvalue <- 1
union_df$geneID <- ""
union_df$Count <- 0

union_df <- union_df[!duplicated(union_df$ID), ]
rownames(union_df) <- union_df$ID
for(x in 1:length(df_list)){
    rest_ids <- setdiff(rownames(union_df), rownames(df_list[[x]]))
    df_list[[x]] <- rbind(df_list[[x]], union_df[rest_ids, ])
}
#rest_ids[1:10]
filtered_term <- c()

avgIdx <- list()
for(TermID in  union_TermID){
    is_sigs <- sapply(df_list, function(x)x[x$ID==TermID,]$p.adjust < 0.05)
    is_true_df <- is_contigous_true_df(is_sigs)
    if(is_true_df$keep){
        filtered_term <- c(filtered_term, TermID)
        avgIdx[[ union_df[union_df$ID==TermID,]$Description ]] <- is_true_df$avgIdx
    }

}
if(length(filtered_term) > 5){
  df_list <- lapply(df_list, function(x) x %>% filter(ID %in% filtered_term) )
  nms <- names(df_list)
 df_list <- lapply(names(df_list), function(x) df_list[[x]] %>% mutate(name=x))
 names(df_list) <- nms
  df_list_select <- lapply(1:length(df_list), function(x) df_list[[x]] %>%
                                   filter(p.adjust < 0.05) %>%
                                   top_n(wt=-log10(p.adjust), n=5) %>%
                                   arrange(+log10(p.adjust)))
  df_list_select <- lapply(df_list_select, function(x)x[1:min(5, nrow(x)), ])

  all_names <- as.vector(unlist(sapply(1:length(df_list_select), function(x) (df_list_select[[x]]$ID))))
  pdf_list <- lapply(1:length(df_list), function(x) subset(df_list[[x]], ID %in%all_names))
  mdf <- do.call(rbind, pdf_list)
  pmdf <- mdf[, c("Description", "name", "p.adjust")]
  pmdf$name <- factor(pmdf$name, levels=names(df_list))

  pmtx <- reshape2::dcast(pmdf,  Description ~ name, value.var = "p.adjust")

  rownames(pmtx) <- pmtx$Description
  pmtx$Description <- NULL
  help_mtx <- pmtx
  help_mtx[help_mtx >= 0.05] = 1000
  help_mtx[help_mtx < 0.05] = 1
  help_mtx <- help_mtx[do.call(order, help_mtx),]
  #matrix_list[[pw]] <- pmtx[rownames(help_mtx), ]
  pmtx <- -log10(pmtx)
  pmtx[pmtx>2] = 2
  pmtx <- pmtx[rownames(help_mtx), ]
  col_fun <-  circlize::colorRamp2(c(0, 0.5, 2), c("purple", "black", "yellow"))
  plthm <- Heatmap(as.matrix(pmtx)[order(unlist(avgIdx[rownames(help_mtx)])), ],
         name = glue("-log10(padjust)"),
         cluster_columns = F,
         cluster_rows = F,
         show_row_names=T,
         col=col_fun,
         heatmap_legend_param = list(direction = "horizontal")
  )
  draw(plthm, heatmap_legend_side = "top")
}
}
```

```{r echo=FALSE, warning= FALSE, message=FALSE, fig.width=16, fig.height=10}
a_vs <- "{{tX}}.vs.{{tY}}"
hallmark_ups <- all_hallmarkup_list[[a_vs]]
hallmark_ups <- hallmark_ups[sapply(hallmark_ups, function(x) dim(x)[1]) > 0]

term_plot_list = lapply(
  hallmark_ups,
  function(x){
    df = x@result
    if (is.list(df) && length(df)==0){
      log_m = as.data.frame(list())
      return(log_m)
    }
    log_m = as.data.frame(-log10(df$p.adjust))
    log_m$names = as.factor(sapply(df$Description, function(y){
        y <- as.character(trimws(y))
        return(y) }))
    log_m$show_names = as.factor(sapply(df$Description, function(y){
        y <- as.character(trimws(y))
        y <- ifelse(nchar(y)<=33,  y, paste0(substr(y, 1, 30), "..."))
        return(y) }))
    log_m <- log_m[order(log_m[,1],decreasing = TRUE),]
    showCatetermry = min(length(log_m[,1]), 10)
    log_m <- log_m[1:showCatetermry, ]
    log_m <- log_m[order(log_m[,1],decreasing = FALSE),]
    return(log_m)
  }
)

### direction genes plot
plots <- lapply(
  seq_along(term_plot_list),
  function(y, i) {
    col <- y[[i]]
    if(length(col) == 0)
      return(NULL)
    ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
    #ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
    geom_bar(stat="identity", fill="#3399CC", color="grey50") +
    ggtitle(paste(names(y)[i])) +
    theme_minimal() +
    theme(axis.text.y  = element_text(size=20), axis.title.y=element_blank(),axis.ticks.y=element_blank()) +
    labs(y = "") +
    scale_y_continuous(name="-log10(p-value)") +
    scale_x_discrete(breaks = col[,2], labels = col[,3]) +
    coord_flip()
  },
  y=term_plot_list
)

plots <-Filter(Negate(is.null), plots)
if(length(plots) > 0){
    for (i in seq(1, length(plots), by=2)){
      ni = min(i+1, length(plots))
      plt <-plot_grid(plotlist=plots[i:ni], ncol=2)
      print(plt)
    }
}

```


## {{tX}} vs {{tY}}  hallmark down

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide', fig.width=13, fig.height=20}
a_vs <- "{{tX}}.vs.{{tY}}"
a_vs <- "{{tX}}.vs.{{tY}}"
hallmark_downs <- all_hallmarkdown_list[[a_vs]]
hallmark_downs <- hallmark_downs[sapply(hallmark_downs, function(x) dim(x)[1]) > 0]

df_list <- hallmark_downs
df_list <- lapply(names(hallmark_downs), function(x) hallmark_downs[[x]]@result)
names(df_list) <- names(hallmark_downs)

if(length(df_list) >= 2){



df_list <- lapply(names(hallmark_downs), function(x) hallmark_downs[[x]]@result)
for(i in 1:length(df_list)){
    assertthat::assert_that( all(rownames(df_list[[i]]) == df_list[[i]]$ID))
}


names(df_list) <- names(hallmark_downs)
union_TermID <- Reduce(union, lapply(df_list, function(x) x$ID))

union_df <- do.call(rbind, df_list)
union_df$GeneRatio <- 0
union_df$BgRatio <- 0
union_df$pvalue <- 1
union_df$p.adjust <- 1
union_df$qvalue <- 1
union_df$geneID <- ""
union_df$Count <- 0

union_df <- union_df[!duplicated(union_df$ID), ]
rownames(union_df) <- union_df$ID
for(x in 1:length(df_list)){
    rest_ids <- setdiff(rownames(union_df), rownames(df_list[[x]]))
    df_list[[x]] <- rbind(df_list[[x]], union_df[rest_ids, ])
}
#rest_ids[1:10]
filtered_term <- c()

avgIdx <- list()
for(TermID in  union_TermID){
    is_sigs <- sapply(df_list, function(x)x[x$ID==TermID,]$p.adjust < 0.05)
    is_true_df <- is_contigous_true_df(is_sigs)
    if(is_true_df$keep){
        filtered_term <- c(filtered_term, TermID)
        avgIdx[[ union_df[union_df$ID==TermID,]$Description ]] <- is_true_df$avgIdx
    }

}
if(length(filtered_term) > 5){
  df_list <- lapply(df_list, function(x) x %>% filter(ID %in% filtered_term) )
  nms <- names(df_list)
 df_list <- lapply(names(df_list), function(x) df_list[[x]] %>% mutate(name=x))
 names(df_list) <- nms
  df_list_select <- lapply(1:length(df_list), function(x) df_list[[x]] %>%
                                   filter(p.adjust < 0.05) %>%
                                   top_n(wt=-log10(p.adjust), n=5) %>%
                                   arrange(+log10(p.adjust)))
  df_list_select <- lapply(df_list_select, function(x)x[1:min(5, nrow(x)), ])

  all_names <- as.vector(unlist(sapply(1:length(df_list_select), function(x) (df_list_select[[x]]$ID))))
  pdf_list <- lapply(1:length(df_list), function(x) subset(df_list[[x]], ID %in%all_names))
  mdf <- do.call(rbind, pdf_list)
  pmdf <- mdf[, c("Description", "name", "p.adjust")]
  pmdf$name <- factor(pmdf$name, levels=names(df_list))

  pmtx <- reshape2::dcast(pmdf,  Description ~ name, value.var = "p.adjust")

  rownames(pmtx) <- pmtx$Description
  pmtx$Description <- NULL
  help_mtx <- pmtx
  help_mtx[help_mtx >= 0.05] = 1000
  help_mtx[help_mtx < 0.05] = 1
  help_mtx <- help_mtx[do.call(order, help_mtx),]
  #matrix_list[[pw]] <- pmtx[rownames(help_mtx), ]
  pmtx <- -log10(pmtx)
  pmtx[pmtx>2] = 2
  pmtx <- pmtx[rownames(help_mtx), ]
  col_fun <-  circlize::colorRamp2(c(0, 0.5, 2), c("purple", "black", "yellow"))
  plthm <- Heatmap(as.matrix(pmtx)[order(unlist(avgIdx[rownames(help_mtx)])), ],
         name = glue("-log10(padjust)"),
         cluster_columns = F,
         cluster_rows = F,
         show_row_names=T,
         col=col_fun,
         heatmap_legend_param = list(direction = "horizontal")
  )
  draw(plthm, heatmap_legend_side = "top")
}
}
```


```{r echo=FALSE, warning= FALSE, message=FALSE, fig.width=16, fig.height=10}
### down genes top 10
a_vs <- "{{tX}}.vs.{{tY}}"
hallmark_downs <- all_hallmarkdown_list[[a_vs]]
hallmark_downs <- hallmark_downs[sapply(hallmark_downs, function(x) dim(x)[1]) > 0]

term_plot_list = lapply(
  hallmark_downs,
  function(x){
    df = x@result
    if (is.list(df) && length(df)==0){
      log_m = as.data.frame(list())
      return(log_m)
    }
    log_m = as.data.frame(-log10(df$p.adjust))
    log_m$names = as.factor(sapply(df$Description, function(y){
        y <- as.character(trimws(y))
        return(y) }))
    log_m$show_names = as.factor(sapply(df$Description, function(y){
        y <- as.character(trimws(y))
        y <- ifelse(nchar(y)<=33,  y, paste0(substr(y, 1, 30), "..."))
        return(y) }))
    log_m <- log_m[order(log_m[,1],decreasing = TRUE),]
    showCatetermry = min(length(log_m[,1]), 10)
    log_m <- log_m[1:showCatetermry, ]
    log_m <- log_m[order(log_m[,1],decreasing = FALSE),]
    return(log_m)
  }
)

### direction genes plot
plots <- lapply(
  seq_along(term_plot_list),
  function(y, i) {
    col <- y[[i]]
    if(length(col) == 0)
      return(NULL)
    ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
    #ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
    geom_bar(stat="identity", fill="#3399CC", color="grey50") +
    ggtitle(paste(names(y)[i])) +
    theme_minimal() +
    theme(axis.text.y  = element_text(size=20), axis.title.y=element_blank(),axis.ticks.y=element_blank()) +
    labs(y = "") +
    scale_y_continuous(name="-log10(p-value)") +
    scale_x_discrete(breaks = col[,2], labels = col[,3]) +
    coord_flip()
  },
  y=term_plot_list
)


plots <-Filter(Negate(is.null), plots)

if(length(plots) > 0){
    for (i in seq(1, length(plots), by=2)){
      ni = min(i+1, length(plots))
      plt <-plot_grid(plotlist=plots[i:ni], ncol=2)
      print(plt)
    }
}

```
{% endfor %}
