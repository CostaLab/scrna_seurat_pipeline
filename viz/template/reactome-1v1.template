---
title: "Between Samples reactome analysis"
author: "Mingbo Cheng"
date: "{{TODAY}}"
output:
  html_document:
    toc: yes
    toc_depth: 3
  pdf_document:
    toc: yes
    toc_depth: '3'
params:
    cluster: "clusters to analyse"
    project: "name/tag of the project"
    savedir: "directory where rds files were saved"
    funcs: "analysis steps to be performed"
    report_data_folder: "folder with the output tables"
    report_tables_folder: "folder with the table elements"
    report_plots_folder: "folder with the plot elements"
    report_plots_folder_png: "folder with the png plot elements"
    report_plots_folder_pdf: "folder with the pdf plot elements"
---



```{r Marker_genes, echo=FALSE, warning=FALSE, message=FALSE, results='hide' }
#use former data coz the DE analysis takes too much time.
library(ggplot2)
library(gridExtra)
library(cowplot)
library(dplyr)
library(openxlsx)
library(WriteXLS)
library(stringr)
library(digest)
library(plotly)
library(Seurat)
library(Hmisc)
library(EnhancedVolcano)
library(ComplexHeatmap)
library(glue)
`%ni%` <- Negate(`%in%`)


#savedir <- "save/save-{{CC}}"
savedir <- "../save"
scrna <- readRDS(file.path(savedir, "scrna_phase_comparing.Rds"))

cluster_use <- params$cluster
reactome_sample_name <-paste0("pathway_name_", cluster_use)
if(reactome_sample_name %ni% names(scrna@tools)){
  stop(glue("ERORR:reactome samples comparing hasn't been calculated for cluster:{cluster_use}\n Please run [scrna_pathway_name]!!!"))
}

all_reactomeup_list <-  scrna@tools[[reactome_sample_name]]$reactomeup
all_reactomedown_list <-  scrna@tools[[reactome_sample_name]]$reactomedown
```


{% for tX, tY in lst_1v1 %}

## {{tX}} vs {{tY}}  reactome up

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide', fig.width=13, fig.height=20}
a_vs <- "{{tX}}.vs.{{tY}}"
reactome_ups <- all_reactomeup_list[[a_vs]]
reactome_ups <- reactome_ups[sapply(reactome_ups, function(x) dim(x)[1]) > 0]
reactome.up.list <- reactome_ups

df.list <- lapply(names(reactome.up.list), function(x) reactome.up.list[[x]]@result)
names(df.list) <- names(reactome.up.list)
intersect_reactomeID <- Reduce(intersect, lapply(df.list, function(x) x$ID))
filtered_reactome <- c()
for(reactomeid in  intersect_reactomeID){
    is_sigs <- sapply(df.list, function(x)x[x$ID==reactomeid,]$p.adjust < 0.05)
    if(any(is_sigs) & table(is_sigs)["TRUE"] == 1){
        filtered_reactome <- c(filtered_reactome, reactomeid)
    }
}

if(length(filtered_reactome) > 10){
  df.list <- lapply(df.list, function(x) x %>% filter(ID %in% filtered_reactome) )
  df.list <- lapply(names(df.list), function(x) df.list[[x]] %>% mutate(name=x))
  mdf <- do.call(rbind, df.list)
  pmdf <- mdf[, c("Description", "name", "p.adjust")]

  pmtx <- reshape2::dcast(pmdf,  Description ~ name)

  rownames(pmtx) <- pmtx$Description
  pmtx$Description <- NULL
  help_mtx <- pmtx
  help_mtx[help_mtx >= 0.05] = 1000
  help_mtx[help_mtx < 0.05] = 1
  help_mtx <- help_mtx[do.call(order, help_mtx),]
  pmtx <- -log10(pmtx)
  pmtx[pmtx>2] = 2
  pmtx <- pmtx[rownames(help_mtx), ]
  col_fun <-  circlize::colorRamp2(c(0, 1, +2), c("purple", "black", "yellow"))
  p <- Heatmap(as.matrix(pmtx),
         name = "-log10(padjust)",
         cluster_columns = F,
         cluster_rows = F,
         show_row_names=T,
         col=col_fun)
  draw(p, heatmap_legend_side = "left")
}
```

```{r echo=FALSE, warning= FALSE, message=FALSE, fig.width=15, fig.height=30}
a_vs <- "{{tX}}.vs.{{tY}}"
reactome_ups <- all_reactomeup_list[[a_vs]]
reactome_ups <- reactome_ups[sapply(reactome_ups, function(x) dim(x)[1]) > 0]

### up genes top 10
reactome.plot.list = lapply(reactome_ups, function(x){
            df = x@result
            if (is.list(df) && length(df)==0){
              log.m = as.data.frame(list())
              return(log.m)
            }
            log.m = as.data.frame(-log10(df$p.adjust))
            log.m$names =as.factor(sapply(df$Description, function(y){
              y <- as.character(trimws(y))
              if(str_length(y) > 60){
                hs <- digest(y, "crc32")
                y = paste(substr(y, 1, 50), hs)}
                return(y) }))
            log.m <- log.m[order(log.m[,1],decreasing = TRUE),]
            showCatereactomery = min(length(log.m[,1]), 10)
            log.m <- log.m[1:showCatereactomery, ]
            log.m <- log.m[order(log.m[,1],decreasing = FALSE),]
            return(log.m)
            } )

### up genes plot
plots = lapply(seq_along(reactome.plot.list), function(y, i) {
        col <- y[[i]]
        if(length(col) == 0)
          return(NULL)
        ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
        geom_bar(stat="identity", fill="#3399CC", color="grey50") +
        ggtitle(paste("reactome Up ", names(y)[i])) +
        theme(axis.text.y  = element_text(size=14)) +
        scale_y_continuous(name="-log10(p-value)") +
        scale_x_discrete(name= "") +
        coord_flip()}
       ,
       y=reactome.plot.list)
plots <-Filter(Negate(is.null), plots)
if(length(plots) > 0){
        plot_grid(plotlist=plots, ncol=2)
}

```


## {{tX}} vs {{tY}}  reactome down

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide', fig.width=13, fig.height=20}
a_vs <- "{{tX}}.vs.{{tY}}"
a_vs <- "{{tX}}.vs.{{tY}}"
reactome_downs <- all_reactomedown_list[[a_vs]]
reactome_downs <- reactome_downs[sapply(reactome_downs, function(x) dim(x)[1]) > 0]

reactome.down.list <- reactome_downs

df.list <- lapply(names(reactome.down.list), function(x) reactome.down.list[[x]]@result)
names(df.list) <- names(reactome.down.list)
intersect_reactomeID <- Reduce(intersect, lapply(df.list, function(x) x$ID))
filtered_reactome <- c()
for(reactomeid in  intersect_reactomeID){
    is_sigs <- sapply(df.list, function(x)x[x$ID==reactomeid,]$p.adjust < 0.05)
    if(any(is_sigs) & table(is_sigs)["TRUE"] == 1){
        filtered_reactome <- c(filtered_reactome, reactomeid)
    }
}

if(length(filtered_reactome) > 10){
  df.list <- lapply(df.list, function(x) x %>% filter(ID %in% filtered_reactome) )
  df.list <- lapply(names(df.list), function(x) df.list[[x]] %>% mutate(name=x))
  mdf <- do.call(rbind, df.list)
  pmdf <- mdf[, c("Description", "name", "p.adjust")]

  pmtx <- reshape2::dcast(pmdf,  Description ~ name)

  rownames(pmtx) <- pmtx$Description
  pmtx$Description <- NULL
  help_mtx <- pmtx
  help_mtx[help_mtx >= 0.05] = 1000
  help_mtx[help_mtx < 0.05] = 1
  help_mtx <- help_mtx[do.call(order, help_mtx),]
  pmtx <- -log10(pmtx)
  pmtx[pmtx>2] = 2
  pmtx <- pmtx[rownames(help_mtx), ]
  col_fun <-  circlize::colorRamp2(c(0, 1, +2), c("purple", "black", "yellow"))
  p <- Heatmap(as.matrix(pmtx),
         name = "-log10(padjust)",
         cluster_columns = F,
         cluster_rows = F,
         show_row_names=T,
         col=col_fun)
  draw(p, heatmap_legend_side = "left")
}
```


```{r echo=FALSE, warning= FALSE, message=FALSE, fig.width=15, fig.height=30}
### down genes top 10
a_vs <- "{{tX}}.vs.{{tY}}"
reactome_downs <- all_reactomedown_list[[a_vs]]
reactome_downs <- reactome_downs[sapply(reactome_downs, function(x) dim(x)[1]) > 0]

reactome.plot.list = lapply(reactome_downs, function(x){
            df = x@result
            if (is.list(df) && length(df)==0){
              log.m = as.data.frame(list())
              return(log.m)
            }
            log.m = as.data.frame(-log10(df$p.adjust))
            log.m$names =as.factor(sapply(df$Description, function(y){
              y <- as.character(trimws(y))
              if(str_length(y) > 60){
                hs <- digest(y, "crc32")
                y = paste(substr(y, 1, 50), hs)}
                return(y) }))
            log.m <- log.m[order(log.m[,1],decreasing = TRUE),]
            showCatereactomery = min(length(log.m[,1]), 10)
            log.m <- log.m[1:showCatereactomery, ]
            log.m <- log.m[order(log.m[,1],decreasing = FALSE),]
            return(log.m)
            } )


### down genes plot
plots = lapply(seq_along(reactome.plot.list), function(y, i) {
        col <- y[[i]]
        if(length(col) == 0)
          return(NULL)
        ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
        geom_bar(stat="identity", fill= "#3399CC", color="grey50") +
        ggtitle(paste("reactome Down ", names(y)[i] )) +
        theme(axis.text.y  = element_text(size=14)) +
        scale_y_continuous(name="-log10(p-value)") +
        scale_x_discrete(name= "") +
        coord_flip()}
       ,
       y=reactome.plot.list)
plots <-Filter(Negate(is.null), plots)
if(length(plots) > 0)
        plot_grid(plotlist=plots, ncol=2)
```

{% endfor %}
