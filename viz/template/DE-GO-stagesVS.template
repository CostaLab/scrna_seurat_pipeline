---
title: "Between Groups DE & GO analysis"
date: "{{TODAY}}"
output:
  html_document:
    toc: yes
    toc_depth: 3
  pdf_document:
    toc: yes
    toc_depth: '3'
params:
    scrna: 'scrna object'
    cluster: "clusters to analyse"
    cluster_info: "cluster info"
    project: "name/tag of the project"
    savedir: "directory where rds files were saved"
    funcs: "analysis steps to be performed"
    report_data_folder: "folder with the output tables"
    report_tables_folder: "folder with the table elements"
    report_plots_folder: "folder with the plot elements"
    report_plots_folder_png: "folder with the png plot elements"
    report_plots_folder_pdf: "folder with the pdf plot elements"
    author: "author of document"
author: '`r params$author`'
---
## Differential Expression & GO analysis(between groups)


```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide' }
#use former data coz the DE analysis takes too much time.
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(WriteXLS))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(digest))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(EnhancedVolcano))
suppressPackageStartupMessages(library(glue))
suppressPackageStartupMessages(library(DOSE))
`%ni%` <- Negate(`%in%`)



GeneBarPlot <- function(de.data, xlim = NULL, main = NULL) {
  #de.data = cluster.de[[id]]
  #de.data = plot_de
  if("avg_logFC" %in% names(de.data)){ ## compatible for seurat3
    de.data$avg_log2FC <- de.data$avg_logFC/log(2)
  }
  if (any(colnames(de.data) == "cluster")) {
    top5.up <- de.data %>% group_by(cluster) %>% top_n(10, avg_logFC) %>%filter(avg_logFC > 0) %>% arrange(-avg_logFC)
    top5.dn <- de.data %>% group_by(cluster) %>% top_n(10, -avg_logFC) %>%filter(avg_logFC < 0) %>% arrange(-avg_logFC)
  } else {
    top5.up <- de.data  %>% top_n(10, avg_logFC) %>%filter(avg_logFC > 0) %>% arrange(-avg_logFC)
    top5.dn <- de.data  %>% top_n(10, -avg_logFC) %>%filter(avg_logFC < 0) %>% arrange(-avg_logFC)
  }
  top.up.dn <- rbind(top5.up, top5.dn)
  top.up.dn$gene <- make.unique(top.up.dn$gene)
  top.up.dn$type = ifelse(top.up.dn$avg_logFC > 0, "positive", "negative")
  top.up.dn$type <- factor(top.up.dn$type, levels = c("positive", "negative"))
  g <- ggplot(data = top.up.dn,
              aes(x = gene, y = avg_logFC, fill = type)) +
    geom_bar(stat="identity") +
    scale_x_discrete(limits=rev(top.up.dn$gene)) +
    theme(legend.position="none", axis.text=element_text(size=15)) +
    scale_fill_manual(values = c(positive = "#E41A1C", negative = "#377EB8")) +
    coord_flip()
  if (!is.null(main)) {
    g <- g + ggtitle(main)
  } else {
    g <- g + ggtitle("Average logFC for the top 5 up and top 5 down regulated genes")
  }
  if (!is.null(xlim)) {
    # Coordinates are flipped
    g <- g + ylim(xlim)
  }
  return(g)
}

is_contigous_true_df <- function(is_sigs){
  ret_df <- data.frame(keep=FALSE, avgIdx=-1)
  if(any(is_sigs) & table(is_sigs)['TRUE'] == 1){
        ret_df$keep=TRUE
        ret_df$avgIdx = which(is_sigs == TRUE)
        return(ret_df)
  }
  return(ret_df)
}


#savedir <- "save/save-{{CC}}"
savedir = params$savedir


cluster_use <- params$cluster
dego_stage_name <-paste0("dego_stage_", cluster_use)

if(dego_stage_name %ni% names(scrna@tools)){
  stop(glue("ERORR:DE&GO stages comparing hasn't been calculated for cluster:{cluster_use}\n Please run [scrna_dego_stage]!!!"))
}


de.list <- scrna@tools[[dego_stage_name]]
all_de_list <-  scrna@tools[[dego_stage_name]]$de
all_goup_list <-  scrna@tools[[dego_stage_name]]$goup
all_godown_list <-  scrna@tools[[dego_stage_name]]$godown
```


```{r echo=F, warning=F, message=F}

par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Cluster: ", cluster_info),
     cex = 1.6, col = "red")

```

{% for tX, tY in lst_stages %}

## Plot {{tX}} vs {{tY}}

#### DE

```{r echo=FALSE, warning= FALSE, message=FALSE, fig.width=13, fig.height=10}

#> names(scrna@tools$dego_stage_removed_clusters)
#[1] "de"     "goup"   "godown"
#> names(scrna@tools$dego_stage_removed_clusters$de)
#[1] "MxCre.vs.Csnk"
#> names(scrna@tools$dego_name_removed_clusters$de)
#[1] "A_MxCre.vs.B_MxCre" "A_MxCre.vs.C_Csnk"  "A_MxCre.vs.D_Csnk"
#[4] "B_MxCre.vs.C_Csnk"  "B_MxCre.vs.D_Csnk"  "C_Csnk.vs.D_Csnk"
#> names(scrna@tools$dego_name_removed_clusters$de[["A_MxCre.vs.B_MxCre"]])
# [1] "0"  "2"  "4"  "5"  "7"  "8"  "9"  "10" "11" "12" "13" "14"

a_vs <- "{{tX}}.vs.{{tY}}"

de.list <- all_de_list[[a_vs]]

de.list <- lapply(de.list, subset, subset = p_val_adj < 0.05)

plots <- list()
for (i in names(de.list)){

  if(nrow(de.list[[i]]) == 0){
    next
  }
  if("avg_logFC" %in% names(de.list[[i]])){ ## compatible for seurat3
    de.list[[i]]$avg_log2FC <- de.list[[i]]$avg_logFC/log(2)
  }
  x.lim = max(abs(de.list[[i]]$avg_log2FC))
  x.lim <- c(-x.lim, x.lim)
  plots[[i]] <- GeneBarPlot(de.list[[i]], xlim = x.lim,
                    main = paste("cluster", as.character(i), sep = " "))
}


plots <-Filter(Negate(is.null), plots)

if(length(plots) > 0){
	for (i in seq(1, length(plots), by=3)){
	   ni = min(i+2, length(plots))
	   p <-plot_grid(plotlist=plots[i:ni], ncol=3)
	   print(p)
	}
}
```

#### {{tX}} vs {{tY}} Volcano

```{r echo=FALSE, warning= FALSE, message=FALSE, fig.width=8, fig.height=8}
a_vs <- "{{tX}}.vs.{{tY}}"
de.list <- all_de_list[[a_vs]]
help_sort_func <- ifelse(all.is.numeric(names(de.list)), as.numeric, function(x){x})

for (id in sort(help_sort_func(names(de.list)))) {
  id <- as.character(id)
  a_de <- de.list[[id]]
  if("avg_logFC" %in% names(a_de)){ ## compatible for seurat3
    a_de$avg_log2FC <- a_de$avg_logFC/log(2)
  }
  a_de$log2FC <- a_de$avg_log2FC# / log(2)
  up <- nrow(a_de %>% filter(log2FC>= 0.25 & p_val_adj<=0.05) )
  down <- nrow(a_de %>% filter(log2FC <= -0.25 & p_val_adj<=0.05))
  p <- EnhancedVolcano(a_de,
                       x="logFC",
                       y = "p_val_adj",
                       lab=rownames(a_de),
                       pCutoff = 0.05,
                       FCcutoff = 0.25,
                       pointSize = 1.0,
                       title=glue("Volcano {id}"),
                       subtitle=glue("up:{up} down:{down}"))
  print(p)
}
```




#### {{tX}} vs {{tY}}  GO up

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide', fig.width=13, fig.height=20}
a_vs <- "{{tX}}.vs.{{tY}}"
go_ups <- all_goup_list[[a_vs]]
go_ups <- go_ups[sapply(go_ups, function(x) dim(x)[1]) > 0]

df_list <- go_ups
df_list <- lapply(names(go_ups), function(x) go_ups[[x]]@result)
names(df_list) <- names(go_ups)

if(length(df_list) >= 2){



df_list <- lapply(names(go_ups), function(x) go_ups[[x]]@result)
for(i in 1:length(df_list)){
    assertthat::assert_that( all(rownames(df_list[[i]]) == df_list[[i]]$ID))
}


names(df_list) <- names(go_ups)
union_TermID <- Reduce(union, lapply(df_list, function(x) x$ID))

union_df <- do.call(rbind, df_list)
union_df$GeneRatio <- 0
union_df$BgRatio <- 0
union_df$pvalue <- 1
union_df$p.adjust <- 1
union_df$qvalue <- 1
union_df$geneID <- ""
union_df$Count <- 0

union_df <- union_df[!duplicated(union_df$ID), ]
rownames(union_df) <- union_df$ID
for(x in 1:length(df_list)){
    rest_ids <- setdiff(rownames(union_df), rownames(df_list[[x]]))
    df_list[[x]] <- rbind(df_list[[x]], union_df[rest_ids, ])
}
#rest_ids[1:10]
filtered_term <- c()

avgIdx <- list()
for(TermID in  union_TermID){
    is_sigs <- sapply(df_list, function(x)x[x$ID==TermID,]$p.adjust < 0.05)
    is_true_df <- is_contigous_true_df(is_sigs)
    if(is_true_df$keep){
        filtered_term <- c(filtered_term, TermID)
        avgIdx[[ union_df[union_df$ID==TermID,]$Description ]] <- is_true_df$avgIdx
    }

}
if(length(filtered_term) > 5){
  df_list <- lapply(df_list, function(x) x %>% filter(ID %in% filtered_term) )
  nms <- names(df_list)
 df_list <- lapply(names(df_list), function(x) df_list[[x]] %>% mutate(name=x))
 names(df_list) <- nms
  df_list_select <- lapply(1:length(df_list), function(x) df_list[[x]] %>%
                                   filter(p.adjust < 0.05) %>%
                                   top_n(wt=-log10(p.adjust), n=5) %>%
                                   arrange(+log10(p.adjust)))
  df_list_select <- lapply(df_list_select, function(x)x[1:min(5, nrow(x)), ])

  all_names <- as.vector(unlist(sapply(1:length(df_list_select), function(x) (df_list_select[[x]]$ID))))
  pdf_list <- lapply(1:length(df_list), function(x) subset(df_list[[x]], ID %in%all_names))
  mdf <- do.call(rbind, pdf_list)
  pmdf <- mdf[, c("Description", "name", "p.adjust")]
  pmdf$name <- factor(pmdf$name, levels=names(df_list))

  pmtx <- reshape2::dcast(pmdf,  Description ~ name, value.var = "p.adjust")

  rownames(pmtx) <- pmtx$Description
  pmtx$Description <- NULL
  help_mtx <- pmtx
  help_mtx[help_mtx >= 0.05] = 1000
  help_mtx[help_mtx < 0.05] = 1
  help_mtx <- help_mtx[do.call(order, help_mtx),]
  #matrix_list[[pw]] <- pmtx[rownames(help_mtx), ]
  pmtx <- -log10(pmtx)
  pmtx[pmtx>2] = 2
  pmtx <- pmtx[rownames(help_mtx), ]
  col_fun <-  circlize::colorRamp2(c(0, 0.5, 2), c("purple", "black", "yellow"))
  plthm <- Heatmap(as.matrix(pmtx)[order(unlist(avgIdx[rownames(help_mtx)])), ],
         name = glue("-log10(padjust)"),
         cluster_columns = F,
         cluster_rows = F,
         show_row_names=T,
         col=col_fun,
         heatmap_legend_param = list(direction = "horizontal")
  )
  draw(plthm, heatmap_legend_side = "top")
}
}
```




```{r echo=FALSE, warning= FALSE, message=FALSE, fig.width=16, fig.height=10}
a_vs <- "{{tX}}.vs.{{tY}}"
go_ups <- all_goup_list[[a_vs]]
go_ups <- go_ups[sapply(go_ups, function(x) dim(x)[1]) > 0]

term_plot_list = lapply(
  go_ups,
  function(x){
    df = x@result
    if (is.list(df) && length(df)==0){
      log_m = as.data.frame(list())
      return(log_m)
    }
    log_m = as.data.frame(-log10(df$p.adjust))
    log_m$names = as.factor(sapply(df$Description, function(y){
        y <- as.character(trimws(y))
        return(y) }))
    log_m$show_names = as.factor(sapply(df$Description, function(y){
        y <- as.character(trimws(y))
        y <- ifelse(nchar(y)<=33,  y, paste0(substr(y, 1, 30), "..."))
        return(y) }))
    log_m <- log_m[order(log_m[,1],decreasing = TRUE),]
    showCatetermry = min(length(log_m[,1]), 10)
    log_m <- log_m[1:showCatetermry, ]
    log_m <- log_m[order(log_m[,1],decreasing = FALSE),]
    return(log_m)
  }
)

### direction genes plot
plots <- lapply(
  seq_along(term_plot_list),
  function(y, i) {
    col <- y[[i]]
    if(length(col) == 0)
      return(NULL)
    ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
    #ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
    geom_bar(stat="identity", fill="#3399CC", color="grey50") +
    ggtitle(paste(names(y)[i])) +
    theme_minimal() +
    theme(axis.text.y  = element_text(size=20), axis.title.y=element_blank(),axis.ticks.y=element_blank()) +
    labs(y = "") +
    scale_y_continuous(name="-log10(p-value)") +
    scale_x_discrete(breaks = col[,2], labels = col[,3]) +
    coord_flip()
  },
  y=term_plot_list
)

plots <-Filter(Negate(is.null), plots)
if(length(plots) > 0){
    for (i in seq(1, length(plots), by=2)){
      ni = min(i+1, length(plots))
      plt <-plot_grid(plotlist=plots[i:ni], ncol=2)
      print(plt)
    }
}

```




#### {{tX}} vs {{tY}}  GO down
```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide', fig.width=13, fig.height=20}
a_vs <- "{{tX}}.vs.{{tY}}"
go_downs <- all_godown_list[[a_vs]]
go_downs <-  go_downs[sapply(go_downs, function(x) dim(x)[1]) > 0]
df_list <- go_downs
df_list <- lapply(names(go_downs), function(x) go_downs[[x]]@result)
names(df_list) <- names(go_downs)

if(length(df_list) >= 2){



df_list <- lapply(names(go_downs), function(x) go_downs[[x]]@result)
for(i in 1:length(df_list)){
    assertthat::assert_that( all(rownames(df_list[[i]]) == df_list[[i]]$ID))
}


names(df_list) <- names(go_downs)
union_TermID <- Reduce(union, lapply(df_list, function(x) x$ID))

union_df <- do.call(rbind, df_list)
union_df$GeneRatio <- 0
union_df$BgRatio <- 0
union_df$pvalue <- 1
union_df$p.adjust <- 1
union_df$qvalue <- 1
union_df$geneID <- ""
union_df$Count <- 0

union_df <- union_df[!duplicated(union_df$ID), ]
rownames(union_df) <- union_df$ID
for(x in 1:length(df_list)){
    rest_ids <- setdiff(rownames(union_df), rownames(df_list[[x]]))
    df_list[[x]] <- rbind(df_list[[x]], union_df[rest_ids, ])
}
#rest_ids[1:10]
filtered_term <- c()

avgIdx <- list()
for(TermID in  union_TermID){
    is_sigs <- sapply(df_list, function(x)x[x$ID==TermID,]$p.adjust < 0.05)
    is_true_df <- is_contigous_true_df(is_sigs)
    if(is_true_df$keep){
        filtered_term <- c(filtered_term, TermID)
        avgIdx[[ union_df[union_df$ID==TermID,]$Description ]] <- is_true_df$avgIdx
    }

}
if(length(filtered_term) > 5){
  df_list <- lapply(df_list, function(x) x %>% filter(ID %in% filtered_term) )
  nms <- names(df_list)
 df_list <- lapply(names(df_list), function(x) df_list[[x]] %>% mutate(name=x))
 names(df_list) <- nms
  df_list_select <- lapply(1:length(df_list), function(x) df_list[[x]] %>%
                                   filter(p.adjust < 0.05) %>%
                                   top_n(wt=-log10(p.adjust), n=5) %>%
                                   arrange(+log10(p.adjust)))
  df_list_select <- lapply(df_list_select, function(x)x[1:min(5, nrow(x)), ])

  all_names <- as.vector(unlist(sapply(1:length(df_list_select), function(x) (df_list_select[[x]]$ID))))
  pdf_list <- lapply(1:length(df_list), function(x) subset(df_list[[x]], ID %in%all_names))
  mdf <- do.call(rbind, pdf_list)
  pmdf <- mdf[, c("Description", "name", "p.adjust")]
  pmdf$name <- factor(pmdf$name, levels=names(df_list))

  pmtx <- reshape2::dcast(pmdf,  Description ~ name, value.var = "p.adjust")

  rownames(pmtx) <- pmtx$Description
  pmtx$Description <- NULL
  help_mtx <- pmtx
  help_mtx[help_mtx >= 0.05] = 1000
  help_mtx[help_mtx < 0.05] = 1
  help_mtx <- help_mtx[do.call(order, help_mtx),]
  #matrix_list[[pw]] <- pmtx[rownames(help_mtx), ]
  pmtx <- -log10(pmtx)
  pmtx[pmtx>2] = 2
  pmtx <- pmtx[rownames(help_mtx), ]
  col_fun <-  circlize::colorRamp2(c(0, 0.5, 2), c("purple", "black", "yellow"))
  plthm <- Heatmap(as.matrix(pmtx)[order(unlist(avgIdx[rownames(help_mtx)])), ],
         name = glue("-log10(padjust)"),
         cluster_columns = F,
         cluster_rows = F,
         show_row_names=T,
         col=col_fun,
         heatmap_legend_param = list(direction = "horizontal")
  )
  draw(plthm, heatmap_legend_side = "top")
}
}
```


```{r echo=FALSE, warning= FALSE, message=FALSE, fig.width=16, fig.height=10}
### down genes top 10
a_vs <- "{{tX}}.vs.{{tY}}"
go_downs <- all_godown_list[[a_vs]]
go_downs <-  go_downs[sapply(go_downs, function(x) dim(x)[1]) > 0]

term_plot_list = lapply(
  go_downs,
  function(x){
    df = x@result
    if (is.list(df) && length(df)==0){
      log_m = as.data.frame(list())
      return(log_m)
    }
    log_m = as.data.frame(-log10(df$p.adjust))
    log_m$names = as.factor(sapply(df$Description, function(y){
        y <- as.character(trimws(y))
        return(y) }))
    log_m$show_names = as.factor(sapply(df$Description, function(y){
        y <- as.character(trimws(y))
        y <- ifelse(nchar(y)<=33,  y, paste0(substr(y, 1, 30), "..."))
        return(y) }))
    log_m <- log_m[order(log_m[,1],decreasing = TRUE),]
    showCatetermry = min(length(log_m[,1]), 10)
    log_m <- log_m[1:showCatetermry, ]
    log_m <- log_m[order(log_m[,1],decreasing = FALSE),]
    return(log_m)
  }
)

### direction genes plot
plots <- lapply(
  seq_along(term_plot_list),
  function(y, i) {
    col <- y[[i]]
    if(length(col) == 0)
      return(NULL)
    ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
    #ggplot(col, aes(reorder(x=col[,2], col[,1]), y=col[,1])) +
    geom_bar(stat="identity", fill="#3399CC", color="grey50") +
    ggtitle(paste(names(y)[i])) +
    theme_minimal() +
    theme(axis.text.y  = element_text(size=20), axis.title.y=element_blank(),axis.ticks.y=element_blank()) +
    labs(y = "") +
    scale_y_continuous(name="-log10(p-value)") +
    scale_x_discrete(breaks = col[,2], labels = col[,3]) +
    coord_flip()
  },
  y=term_plot_list
)

plots <-Filter(Negate(is.null), plots)
if(length(plots) > 0){
    for (i in seq(1, length(plots), by=2)){
      ni = min(i+1, length(plots))
      plt <-plot_grid(plotlist=plots[i:ni], ncol=2)
      print(plt)
    }
}

```


#### UMAP for {{tX}} vs {{tY}}

```{r echo=FALSE, warning= FALSE, message=FALSE, fig.height=10,  fig.width=13}

cluster.de.top10 <- lapply(de.list, function(x) {
    if (is.null(x[[1]])) return(NULL)
    if("avg_logFC" %in% names(x)){ ## compatible for seurat3
      x$avg_log2FC <- x$avg_logFC/log(2)
    }
    x %>% top_n(10, avg_log2FC) %>% arrange(gene)
})

for (i in names(de.list)){
   if(nrow(cluster.de.top10[[i]]) == 0) {
      next
   }
   print(sprintf("Cluster %s", i))
   ps<- FeaturePlot(scrna, features = cluster.de.top10[[i]]$gene,
                    cols = c("lightgrey", "red"),
                    reduction = "DEFAULT_UMAP")
   print(ps)
}
```
{% endfor %}
